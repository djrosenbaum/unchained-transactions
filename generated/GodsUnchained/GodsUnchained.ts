// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class ProtoUpdated extends EthereumEvent {
  get params(): ProtoUpdated__Params {
    return new ProtoUpdated__Params(this);
  }
}

export class ProtoUpdated__Params {
  _event: ProtoUpdated;

  constructor(event: ProtoUpdated) {
    this._event = event;
  }

  get id(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class SeasonStarted extends EthereumEvent {
  get params(): SeasonStarted__Params {
    return new SeasonStarted__Params(this);
  }
}

export class SeasonStarted__Params {
  _event: SeasonStarted;

  constructor(event: SeasonStarted) {
    this._event = event;
  }

  get id(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get low(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get high(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class QualityChanged extends EthereumEvent {
  get params(): QualityChanged__Params {
    return new QualityChanged__Params(this);
  }
}

export class QualityChanged__Params {
  _event: QualityChanged;

  constructor(event: QualityChanged) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get quality(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get factory(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CardsMinted extends EthereumEvent {
  get params(): CardsMinted__Params {
    return new CardsMinted__Params(this);
  }
}

export class CardsMinted__Params {
  _event: CardsMinted;

  constructor(event: CardsMinted) {
    this._event = event;
  }

  get start(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get protos(): Array<i32> {
    return this._event.parameters[2].value.toI32Array();
  }

  get qualities(): Array<i32> {
    return this._event.parameters[3].value.toI32Array();
  }
}

export class ClassPropertySet extends EthereumEvent {
  get params(): ClassPropertySet__Params {
    return new ClassPropertySet__Params(this);
  }
}

export class ClassPropertySet__Params {
  _event: ClassPropertySet;

  constructor(event: ClassPropertySet) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class TokenPropertySet extends EthereumEvent {
  get params(): TokenPropertySet__Params {
    return new TokenPropertySet__Params(this);
  }
}

export class TokenPropertySet__Params {
  _event: TokenPropertySet;

  constructor(event: TokenPropertySet) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get key(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends EthereumEvent {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GodsUnchained__getBatchResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromI32(this.value1));
    return map;
  }
}

export class GodsUnchained__protosResult {
  value0: boolean;
  value1: boolean;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;
  value7: i32;
  value8: i32;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32,
    value7: i32,
    value8: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromBoolean(this.value0));
    map.set("value1", EthereumValue.fromBoolean(this.value1));
    map.set("value2", EthereumValue.fromI32(this.value2));
    map.set("value3", EthereumValue.fromI32(this.value3));
    map.set("value4", EthereumValue.fromI32(this.value4));
    map.set("value5", EthereumValue.fromI32(this.value5));
    map.set("value6", EthereumValue.fromI32(this.value6));
    map.set("value7", EthereumValue.fromI32(this.value7));
    map.set("value8", EthereumValue.fromI32(this.value8));
    return map;
  }
}

export class GodsUnchained__batchesResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromI32(this.value1));
    return map;
  }
}

export class GodsUnchained__getDetailsResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromI32(this.value0));
    map.set("value1", EthereumValue.fromI32(this.value1));
    return map;
  }
}

export class GodsUnchained__seasonsResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromI32(this.value0));
    map.set("value1", EthereumValue.fromI32(this.value1));
    return map;
  }
}

export class GodsUnchained extends SmartContract {
  static bind(address: Address): GodsUnchained {
    return new GodsUnchained("GodsUnchained", address);
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call("supportsInterface", [
      EthereumValue.fromFixedBytes(interfaceId)
    ]);

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): CallResult<boolean> {
    let result = super.tryCall("supportsInterface", [
      EthereumValue.fromFixedBytes(interfaceId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  mythicTradable(param0: i32): boolean {
    let result = super.call("mythicTradable", [EthereumValue.fromI32(param0)]);

    return result[0].toBoolean();
  }

  try_mythicTradable(param0: i32): CallResult<boolean> {
    let result = super.tryCall("mythicTradable", [
      EthereumValue.fromI32(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): CallResult<Address> {
    let result = super.tryCall("getApproved", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getProto(_tokenId: BigInt): i32 {
    let result = super.call("getProto", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toI32();
  }

  try_getProto(_tokenId: BigInt): CallResult<i32> {
    let result = super.tryCall("getProto", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  addressToUserID(param0: Address): BigInt {
    let result = super.call("addressToUserID", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_addressToUserID(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("addressToUserID", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  mythicApproved(param0: i32, param1: Address): boolean {
    let result = super.call("mythicApproved", [
      EthereumValue.fromI32(param0),
      EthereumValue.fromAddress(param1)
    ]);

    return result[0].toBoolean();
  }

  try_mythicApproved(param0: i32, param1: Address): CallResult<boolean> {
    let result = super.tryCall("mythicApproved", [
      EthereumValue.fromI32(param0),
      EthereumValue.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isOld(_tokenId: BigInt): boolean {
    let result = super.call("isOld", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isOld(_tokenId: BigInt): CallResult<boolean> {
    let result = super.tryCall("isOld", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  factoryApproved(param0: Address, param1: BigInt): boolean {
    let result = super.call("factoryApproved", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_factoryApproved(param0: Address, param1: BigInt): CallResult<boolean> {
    let result = super.tryCall("factoryApproved", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  MYTHIC_THRESHOLD(): i32 {
    let result = super.call("MYTHIC_THRESHOLD", []);

    return result[0].toI32();
  }

  try_MYTHIC_THRESHOLD(): CallResult<i32> {
    let result = super.tryCall("MYTHIC_THRESHOLD", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getTokenKey(_tokenId: BigInt, _key: Bytes): Bytes {
    let result = super.call("getTokenKey", [
      EthereumValue.fromUnsignedBigInt(_tokenId),
      EthereumValue.fromFixedBytes(_key)
    ]);

    return result[0].toBytes();
  }

  try_getTokenKey(_tokenId: BigInt, _key: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getTokenKey", [
      EthereumValue.fromUnsignedBigInt(_tokenId),
      EthereumValue.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getClassKey(_key: Bytes): Bytes {
    let result = super.call("getClassKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);

    return result[0].toBytes();
  }

  try_getClassKey(_key: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getClassKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  migrating(): boolean {
    let result = super.call("migrating", []);

    return result[0].toBoolean();
  }

  try_migrating(): CallResult<boolean> {
    let result = super.tryCall("migrating", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getBatch(index: BigInt): GodsUnchained__getBatchResult {
    let result = super.call("getBatch", [
      EthereumValue.fromUnsignedBigInt(index)
    ]);

    return new GodsUnchained__getBatchResult(
      result[0].toBigInt(),
      result[1].toI32()
    );
  }

  try_getBatch(index: BigInt): CallResult<GodsUnchained__getBatchResult> {
    let result = super.tryCall("getBatch", [
      EthereumValue.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new GodsUnchained__getBatchResult(value[0].toBigInt(), value[1].toI32())
    );
  }

  mintCard(_to: Address, _proto: i32, _quality: i32): BigInt {
    let result = super.call("mintCard", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromI32(_proto),
      EthereumValue.fromI32(_quality)
    ]);

    return result[0].toBigInt();
  }

  try_mintCard(_to: Address, _proto: i32, _quality: i32): CallResult<BigInt> {
    let result = super.tryCall("mintCard", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromI32(_proto),
      EthereumValue.fromI32(_quality)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): CallResult<Address> {
    let result = super.tryCall("ownerOf", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  userIDToAddress(param0: BigInt): Address {
    let result = super.call("userIDToAddress", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_userIDToAddress(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("userIDToAddress", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  baseURI(): string {
    let result = super.call("baseURI", []);

    return result[0].toString();
  }

  try_baseURI(): CallResult<string> {
    let result = super.tryCall("baseURI", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(_owner)]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getBatchStart(tokenId: BigInt): BigInt {
    let result = super.call("getBatchStart", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getBatchStart(tokenId: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getBatchStart", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  startSeason(name: string, low: i32, high: i32): BigInt {
    let result = super.call("startSeason", [
      EthereumValue.fromString(name),
      EthereumValue.fromI32(low),
      EthereumValue.fromI32(high)
    ]);

    return result[0].toBigInt();
  }

  try_startSeason(name: string, low: i32, high: i32): CallResult<BigInt> {
    let result = super.tryCall("startSeason", [
      EthereumValue.fromString(name),
      EthereumValue.fromI32(low),
      EthereumValue.fromI32(high)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  tokenCount(): BigInt {
    let result = super.call("tokenCount", []);

    return result[0].toBigInt();
  }

  try_tokenCount(): CallResult<BigInt> {
    let result = super.tryCall("tokenCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getClassProperty(_key: Bytes): Bytes {
    let result = super.call("getClassProperty", [
      EthereumValue.fromFixedBytes(_key)
    ]);

    return result[0].toBytes();
  }

  try_getClassProperty(_key: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getClassProperty", [
      EthereumValue.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  protos(param0: BigInt): GodsUnchained__protosResult {
    let result = super.call("protos", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new GodsUnchained__protosResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toI32(),
      result[8].toI32()
    );
  }

  try_protos(param0: BigInt): CallResult<GodsUnchained__protosResult> {
    let result = super.tryCall("protos", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new GodsUnchained__protosResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toI32(),
        value[8].toI32()
      )
    );
  }

  seasonTradable(param0: BigInt): boolean {
    let result = super.call("seasonTradable", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_seasonTradable(param0: BigInt): CallResult<boolean> {
    let result = super.tryCall("seasonTradable", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  batches(param0: BigInt): GodsUnchained__batchesResult {
    let result = super.call("batches", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new GodsUnchained__batchesResult(
      result[0].toBigInt(),
      result[1].toI32()
    );
  }

  try_batches(param0: BigInt): CallResult<GodsUnchained__batchesResult> {
    let result = super.tryCall("batches", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new GodsUnchained__batchesResult(value[0].toBigInt(), value[1].toI32())
    );
  }

  protoToSeason(param0: BigInt): i32 {
    let result = super.call("protoToSeason", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_protoToSeason(param0: BigInt): CallResult<i32> {
    let result = super.tryCall("protoToSeason", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  old(): Address {
    let result = super.call("old", []);

    return result[0].toAddress();
  }

  try_old(): CallResult<Address> {
    let result = super.tryCall("old", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getDetails(tokenId: BigInt): GodsUnchained__getDetailsResult {
    let result = super.call("getDetails", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return new GodsUnchained__getDetailsResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_getDetails(tokenId: BigInt): CallResult<GodsUnchained__getDetailsResult> {
    let result = super.tryCall("getDetails", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new GodsUnchained__getDetailsResult(value[0].toI32(), value[1].toI32())
    );
  }

  properties(param0: Bytes): Bytes {
    let result = super.call("properties", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return result[0].toBytes();
  }

  try_properties(param0: Bytes): CallResult<Bytes> {
    let result = super.tryCall("properties", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): CallResult<string> {
    let result = super.tryCall("tokenURI", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  mintCards(_to: Address, _protos: Array<i32>, _qualities: Array<i32>): BigInt {
    let result = super.call("mintCards", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromI32Array(_protos),
      EthereumValue.fromI32Array(_qualities)
    ]);

    return result[0].toBigInt();
  }

  try_mintCards(
    _to: Address,
    _protos: Array<i32>,
    _qualities: Array<i32>
  ): CallResult<BigInt> {
    let result = super.tryCall("mintCards", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromI32Array(_protos),
      EthereumValue.fromI32Array(_qualities)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getProperty(_id: BigInt, _key: Bytes): Bytes {
    let result = super.call("getProperty", [
      EthereumValue.fromUnsignedBigInt(_id),
      EthereumValue.fromFixedBytes(_key)
    ]);

    return result[0].toBytes();
  }

  try_getProperty(_id: BigInt, _key: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getProperty", [
      EthereumValue.fromUnsignedBigInt(_id),
      EthereumValue.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  mythicCreated(param0: i32): boolean {
    let result = super.call("mythicCreated", [EthereumValue.fromI32(param0)]);

    return result[0].toBoolean();
  }

  try_mythicCreated(param0: i32): CallResult<boolean> {
    let result = super.tryCall("mythicCreated", [
      EthereumValue.fromI32(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isTradable(_tokenId: BigInt): boolean {
    let result = super.call("isTradable", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isTradable(_tokenId: BigInt): CallResult<boolean> {
    let result = super.tryCall("isTradable", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  propertyManager(): Address {
    let result = super.call("propertyManager", []);

    return result[0].toAddress();
  }

  try_propertyManager(): CallResult<Address> {
    let result = super.tryCall("propertyManager", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  nextBatch(): BigInt {
    let result = super.call("nextBatch", []);

    return result[0].toBigInt();
  }

  try_nextBatch(): CallResult<BigInt> {
    let result = super.tryCall("nextBatch", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call("isApprovedForAll", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(operator)
    ]);

    return result[0].toBoolean();
  }

  try_isApprovedForAll(owner: Address, operator: Address): CallResult<boolean> {
    let result = super.tryCall("isApprovedForAll", [
      EthereumValue.fromAddress(owner),
      EthereumValue.fromAddress(operator)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getQuality(_tokenId: BigInt): i32 {
    let result = super.call("getQuality", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toI32();
  }

  try_getQuality(_tokenId: BigInt): CallResult<i32> {
    let result = super.tryCall("getQuality", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  batchSize(): BigInt {
    let result = super.call("batchSize", []);

    return result[0].toBigInt();
  }

  try_batchSize(): CallResult<BigInt> {
    let result = super.tryCall("batchSize", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  seasons(param0: BigInt): GodsUnchained__seasonsResult {
    let result = super.call("seasons", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new GodsUnchained__seasonsResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_seasons(param0: BigInt): CallResult<GodsUnchained__seasonsResult> {
    let result = super.tryCall("seasons", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new GodsUnchained__seasonsResult(value[0].toI32(), value[1].toI32())
    );
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class TransferAllFromCall extends EthereumCall {
  get inputs(): TransferAllFromCall__Inputs {
    return new TransferAllFromCall__Inputs(this);
  }

  get outputs(): TransferAllFromCall__Outputs {
    return new TransferAllFromCall__Outputs(this);
  }
}

export class TransferAllFromCall__Inputs {
  _call: TransferAllFromCall;

  constructor(call: TransferAllFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenIDs(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class TransferAllFromCall__Outputs {
  _call: TransferAllFromCall;

  constructor(call: TransferAllFromCall) {
    this._call = call;
  }
}

export class BurnAllCall extends EthereumCall {
  get inputs(): BurnAllCall__Inputs {
    return new BurnAllCall__Inputs(this);
  }

  get outputs(): BurnAllCall__Outputs {
    return new BurnAllCall__Outputs(this);
  }
}

export class BurnAllCall__Inputs {
  _call: BurnAllCall;

  constructor(call: BurnAllCall) {
    this._call = call;
  }

  get tokenIDs(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BurnAllCall__Outputs {
  _call: BurnAllCall;

  constructor(call: BurnAllCall) {
    this._call = call;
  }
}

export class UpdateProtosCall extends EthereumCall {
  get inputs(): UpdateProtosCall__Inputs {
    return new UpdateProtosCall__Inputs(this);
  }

  get outputs(): UpdateProtosCall__Outputs {
    return new UpdateProtosCall__Outputs(this);
  }
}

export class UpdateProtosCall__Inputs {
  _call: UpdateProtosCall;

  constructor(call: UpdateProtosCall) {
    this._call = call;
  }

  get _ids(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get _gods(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get _cardTypes(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get _rarities(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }

  get _manas(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get _attacks(): Array<i32> {
    return this._call.inputValues[5].value.toI32Array();
  }

  get _healths(): Array<i32> {
    return this._call.inputValues[6].value.toI32Array();
  }

  get _tribes(): Array<i32> {
    return this._call.inputValues[7].value.toI32Array();
  }
}

export class UpdateProtosCall__Outputs {
  _call: UpdateProtosCall;

  constructor(call: UpdateProtosCall) {
    this._call = call;
  }
}

export class SetPropertyManagerCall extends EthereumCall {
  get inputs(): SetPropertyManagerCall__Inputs {
    return new SetPropertyManagerCall__Inputs(this);
  }

  get outputs(): SetPropertyManagerCall__Outputs {
    return new SetPropertyManagerCall__Outputs(this);
  }
}

export class SetPropertyManagerCall__Inputs {
  _call: SetPropertyManagerCall;

  constructor(call: SetPropertyManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPropertyManagerCall__Outputs {
  _call: SetPropertyManagerCall;

  constructor(call: SetPropertyManagerCall) {
    this._call = call;
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class LockProtosCall extends EthereumCall {
  get inputs(): LockProtosCall__Inputs {
    return new LockProtosCall__Inputs(this);
  }

  get outputs(): LockProtosCall__Outputs {
    return new LockProtosCall__Outputs(this);
  }
}

export class LockProtosCall__Inputs {
  _call: LockProtosCall;

  constructor(call: LockProtosCall) {
    this._call = call;
  }

  get _ids(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }
}

export class LockProtosCall__Outputs {
  _call: LockProtosCall;

  constructor(call: LockProtosCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends EthereumCall {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class BurnCall extends EthereumCall {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CopyUntilCall extends EthereumCall {
  get inputs(): CopyUntilCall__Inputs {
    return new CopyUntilCall__Inputs(this);
  }

  get outputs(): CopyUntilCall__Outputs {
    return new CopyUntilCall__Outputs(this);
  }
}

export class CopyUntilCall__Inputs {
  _call: CopyUntilCall;

  constructor(call: CopyUntilCall) {
    this._call = call;
  }

  get gasThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CopyUntilCall__Outputs {
  _call: CopyUntilCall;

  constructor(call: CopyUntilCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends EthereumCall {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetPropertyCall extends EthereumCall {
  get inputs(): SetPropertyCall__Inputs {
    return new SetPropertyCall__Inputs(this);
  }

  get outputs(): SetPropertyCall__Outputs {
    return new SetPropertyCall__Outputs(this);
  }
}

export class SetPropertyCall__Inputs {
  _call: SetPropertyCall;

  constructor(call: SetPropertyCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _key(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _value(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetPropertyCall__Outputs {
  _call: SetPropertyCall;

  constructor(call: SetPropertyCall) {
    this._call = call;
  }
}

export class MintCardCall extends EthereumCall {
  get inputs(): MintCardCall__Inputs {
    return new MintCardCall__Inputs(this);
  }

  get outputs(): MintCardCall__Outputs {
    return new MintCardCall__Outputs(this);
  }
}

export class MintCardCall__Inputs {
  _call: MintCardCall;

  constructor(call: MintCardCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _proto(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _quality(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class MintCardCall__Outputs {
  _call: MintCardCall;

  constructor(call: MintCardCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveForMythicCall extends EthereumCall {
  get inputs(): ApproveForMythicCall__Inputs {
    return new ApproveForMythicCall__Inputs(this);
  }

  get outputs(): ApproveForMythicCall__Outputs {
    return new ApproveForMythicCall__Outputs(this);
  }
}

export class ApproveForMythicCall__Inputs {
  _call: ApproveForMythicCall;

  constructor(call: ApproveForMythicCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _mythic(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ApproveForMythicCall__Outputs {
  _call: ApproveForMythicCall;

  constructor(call: ApproveForMythicCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferAllFromCall extends EthereumCall {
  get inputs(): SafeTransferAllFromCall__Inputs {
    return new SafeTransferAllFromCall__Inputs(this);
  }

  get outputs(): SafeTransferAllFromCall__Outputs {
    return new SafeTransferAllFromCall__Outputs(this);
  }
}

export class SafeTransferAllFromCall__Inputs {
  _call: SafeTransferAllFromCall;

  constructor(call: SafeTransferAllFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenIDs(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SafeTransferAllFromCall__Outputs {
  _call: SafeTransferAllFromCall;

  constructor(call: SafeTransferAllFromCall) {
    this._call = call;
  }
}

export class StartSeasonCall extends EthereumCall {
  get inputs(): StartSeasonCall__Inputs {
    return new StartSeasonCall__Inputs(this);
  }

  get outputs(): StartSeasonCall__Outputs {
    return new StartSeasonCall__Outputs(this);
  }
}

export class StartSeasonCall__Inputs {
  _call: StartSeasonCall;

  constructor(call: StartSeasonCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get low(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get high(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class StartSeasonCall__Outputs {
  _call: StartSeasonCall;

  constructor(call: StartSeasonCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetApprovalForAllCall extends EthereumCall {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetClassPropertyCall extends EthereumCall {
  get inputs(): SetClassPropertyCall__Inputs {
    return new SetClassPropertyCall__Inputs(this);
  }

  get outputs(): SetClassPropertyCall__Outputs {
    return new SetClassPropertyCall__Outputs(this);
  }
}

export class SetClassPropertyCall__Inputs {
  _call: SetClassPropertyCall;

  constructor(call: SetClassPropertyCall) {
    this._call = call;
  }

  get _key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _value(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetClassPropertyCall__Outputs {
  _call: SetClassPropertyCall;

  constructor(call: SetClassPropertyCall) {
    this._call = call;
  }
}

export class SafeTransferBatchCall extends EthereumCall {
  get inputs(): SafeTransferBatchCall__Inputs {
    return new SafeTransferBatchCall__Inputs(this);
  }

  get outputs(): SafeTransferBatchCall__Outputs {
    return new SafeTransferBatchCall__Outputs(this);
  }
}

export class SafeTransferBatchCall__Inputs {
  _call: SafeTransferBatchCall;

  constructor(call: SafeTransferBatchCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get start(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get end(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SafeTransferBatchCall__Outputs {
  _call: SafeTransferBatchCall;

  constructor(call: SafeTransferBatchCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends EthereumCall {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class UnlockTradingCall extends EthereumCall {
  get inputs(): UnlockTradingCall__Inputs {
    return new UnlockTradingCall__Inputs(this);
  }

  get outputs(): UnlockTradingCall__Outputs {
    return new UnlockTradingCall__Outputs(this);
  }
}

export class UnlockTradingCall__Inputs {
  _call: UnlockTradingCall;

  constructor(call: UnlockTradingCall) {
    this._call = call;
  }

  get _season(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockTradingCall__Outputs {
  _call: UnlockTradingCall;

  constructor(call: UnlockTradingCall) {
    this._call = call;
  }
}

export class TransferBatchCall extends EthereumCall {
  get inputs(): TransferBatchCall__Inputs {
    return new TransferBatchCall__Inputs(this);
  }

  get outputs(): TransferBatchCall__Outputs {
    return new TransferBatchCall__Outputs(this);
  }
}

export class TransferBatchCall__Inputs {
  _call: TransferBatchCall;

  constructor(call: TransferBatchCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get start(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get end(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferBatchCall__Outputs {
  _call: TransferBatchCall;

  constructor(call: TransferBatchCall) {
    this._call = call;
  }
}

export class MintCardsCall extends EthereumCall {
  get inputs(): MintCardsCall__Inputs {
    return new MintCardsCall__Inputs(this);
  }

  get outputs(): MintCardsCall__Outputs {
    return new MintCardsCall__Outputs(this);
  }
}

export class MintCardsCall__Inputs {
  _call: MintCardsCall;

  constructor(call: MintCardsCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _protos(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get _qualities(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class MintCardsCall__Outputs {
  _call: MintCardsCall;

  constructor(call: MintCardsCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CopyNextBatchCall extends EthereumCall {
  get inputs(): CopyNextBatchCall__Inputs {
    return new CopyNextBatchCall__Inputs(this);
  }

  get outputs(): CopyNextBatchCall__Outputs {
    return new CopyNextBatchCall__Outputs(this);
  }
}

export class CopyNextBatchCall__Inputs {
  _call: CopyNextBatchCall;

  constructor(call: CopyNextBatchCall) {
    this._call = call;
  }
}

export class CopyNextBatchCall__Outputs {
  _call: CopyNextBatchCall;

  constructor(call: CopyNextBatchCall) {
    this._call = call;
  }
}

export class SetQualityCall extends EthereumCall {
  get inputs(): SetQualityCall__Inputs {
    return new SetQualityCall__Inputs(this);
  }

  get outputs(): SetQualityCall__Outputs {
    return new SetQualityCall__Outputs(this);
  }
}

export class SetQualityCall__Inputs {
  _call: SetQualityCall;

  constructor(call: SetQualityCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quality(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetQualityCall__Outputs {
  _call: SetQualityCall;

  constructor(call: SetQualityCall) {
    this._call = call;
  }
}

export class MakeMythicTradableCall extends EthereumCall {
  get inputs(): MakeMythicTradableCall__Inputs {
    return new MakeMythicTradableCall__Inputs(this);
  }

  get outputs(): MakeMythicTradableCall__Outputs {
    return new MakeMythicTradableCall__Outputs(this);
  }
}

export class MakeMythicTradableCall__Inputs {
  _call: MakeMythicTradableCall;

  constructor(call: MakeMythicTradableCall) {
    this._call = call;
  }

  get _mythic(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class MakeMythicTradableCall__Outputs {
  _call: MakeMythicTradableCall;

  constructor(call: MakeMythicTradableCall) {
    this._call = call;
  }
}

export class AddFactoryCall extends EthereumCall {
  get inputs(): AddFactoryCall__Inputs {
    return new AddFactoryCall__Inputs(this);
  }

  get outputs(): AddFactoryCall__Outputs {
    return new AddFactoryCall__Outputs(this);
  }
}

export class AddFactoryCall__Inputs {
  _call: AddFactoryCall;

  constructor(call: AddFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _season(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddFactoryCall__Outputs {
  _call: AddFactoryCall;

  constructor(call: AddFactoryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetMigratingCall extends EthereumCall {
  get inputs(): SetMigratingCall__Inputs {
    return new SetMigratingCall__Inputs(this);
  }

  get outputs(): SetMigratingCall__Outputs {
    return new SetMigratingCall__Outputs(this);
  }
}

export class SetMigratingCall__Inputs {
  _call: SetMigratingCall;

  constructor(call: SetMigratingCall) {
    this._call = call;
  }

  get _migrating(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetMigratingCall__Outputs {
  _call: SetMigratingCall;

  constructor(call: SetMigratingCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _old(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _batchSize(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
